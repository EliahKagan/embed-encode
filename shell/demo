#!/usr/bin/env bash
# Demo of retrieving a base64-encoded text embedding from the OpenAI API.

# Copyright (c) 2023 Eliah Kagan
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

# Usage:
#
#   ./demo [TEXT_TO_EMBED]
#
# If the text to embed is omitted, a sample phrase is used instead.
#
# As written, this script assumes the request succeeds. If the request fails,
# whatever it returned is nonetheless treated as a sequence of coordinates.

set -e

api_key() {
    local key="$OPENAI_API_KEY"
    [ -n "$key" ] || key="$(<../.api_key)"  # Fall back to reading .api_key.
    printf '%s\n' "$key"
}

# Compare https://beta.openai.com/docs/guides/embeddings/how-to-get-embeddings.
# (In "Example: Getting embeddings", select "curl" instead of "python".)
# Requires curl and jq to be installed.
make_request() {
    local text="$*"
    printf '%s\n\n' "$text" >&2

    # Build the JSON with jq --arg, since building it with parameter expansion
    # results in a JSON injection vulnerability where the input text could
    # contain a sequence like '", "injected_key": "injected_value'. Because
    # input_text is a jq variable, not a shell variable, we must use single
    # quotes around the code, so the shell doesn't expand $input_text. (We can
    # call both 'text' but then if we mistakenly used double quotes, everything
    # would seem to work but we'd get the injection bug we're trying to avoid.)
    jq -n --arg input_text "$text" '{
        "input": $input_text,
        "model": "text-embedding-ada-002",
        "encoding_format": "base64"
    }' |
    # Make the API call with the safely jq-constructed JSON.
    curl https://api.openai.com/v1/embeddings \
        -X POST \
        -H "Authorization: Bearer $(api_key)" \
        -H "Content-Type: application/json" \
        -d @-

    printf '\n' >&2
}

# Requires curl, as well as the jq and base64 commands, to be installed.
# If you want raw binary data, remove "od -f" (and the "|" on the line above).
get_embedding() {
    make_request "$@" |            # Receive JSON response (assumes success).
        jq '.data[0].embedding' |  # Parse out the embedding from the JSON.
        sed 's/"//g' |             # Remove the quotation marks.
        base64 -d |                # Decode the base64 string into binary data.
        od -f                      # Show the float32 coordinates as text.
}

if (($# == 0)); then
    # No arguments, so use the same example phrase shown in the OpenAI docs.
    get_embedding 'The food was delicious and the waiter...'
else
    get_embedding "$@"
fi
